package com.usp.util;

public class ByteArrayEquivalent {

	private byte[] bytes;
	private int rows;
	private int cols;
	private double max;
	private double min;

	public ByteArrayEquivalent(double[][] array) {
		
		
	}

	public ByteArrayEquivalent(byte[] bytes, int rows, int cols, double max, double min) {
		this.bytes = bytes;
		this.rows = rows;
		this.cols = cols;
		this.max = max;
		this.min = min;
	}

	public int getRows() {
		return rows;
	}

	public int getCols() {
		return cols;
	}

	public double getMax() {
		return max;
	}

	public double getMin() {
		return min;
	}

	public byte[] getBytes() {
		return bytes;
	}
	
	private void setMinAndMax(double[][] array) {
		this.max = array[0][0];
		this.min = max;

		for (double row[] : array) {
			for (double d : row) {
				if (max < d) {
					max = d;
				}
				if (min > d) {
					min = d;
				}
			}
		}
	}
	
	private void setInfo(double[][] array) {
		setMinAndMax(array);
		rows = array.length;
		cols = array[0].length;
		bytes = new byte[rows * cols];
		int k = 0;
		double factor = 255.0/(max - min);
		for (int i = 0; i < rows ; i ++) {
			for (int j = 0; j < cols; j++) {
				bytes[k] = (byte) ((array[i][j] - min) * factor);
				k++;
			}
		}
		
	}
}
